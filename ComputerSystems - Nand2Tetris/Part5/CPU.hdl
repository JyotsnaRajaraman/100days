// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Select pins:
    //for A register load
    Not(in=instruction[15], out=notinst15);
    Or(a=instruction[5], b=notinst15, out=loada);

    //For D register load
    And(a=instruction[15], b=instruction[4], out=loadd);

    //For PC
    And(a=instructionng, b=instruction[2], out=lessthan); 
    And(a=instructionzr, b=instruction[1], out=eqto); 
    Not(in=instructionng, out=notng);
    Not(in=instructionzr, out=notzr);
    And(a=notzr, b=notng, out=notngzr); 
    And(a=notngzr, b=instruction[0], out=morethan);
    Or(a=morethan, b=lessthan, out=moreorless);
    Or(a=moreorless, b=eqto, out=maybejmp);
    And(a=instruction[15], b=maybejmp, out=loadpc);


    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ina);
    
    ARegister(in=ina, load=loada, out=outa, out[0..14]=addressM);

    DRegister(in=aluout, load=loadd, out=outd);

    Mux16(a=outa, b=inM, sel=instruction[12], out=outaorm);

    ALU(x=outd, y=outaorm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7],no=instruction[6], zr=instructionzr, ng=instructionng, out=outM, out=aluout);

    And(a=instruction[3], b=instruction[15], out=writeM);

    PC(in= outa,load=loadpc, inc= true,reset=reset, out[0..14]=pc);
}